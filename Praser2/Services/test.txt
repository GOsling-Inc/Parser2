object BasicsMain {
   def TestFunction(): Double = {1.0 + 1.0}
   def coinChange(coins: List[Int], money: Int): Int = {
    val combinations: Array[Int] = new Array[Int](money + 1)

    combinations(0) = 1

    for (coin <- coins) {
      for (i <- coin to money) {
        if (i >= coin) {
          combinations(i) += combinations(i - coin)
        }
      }
    }

    combinations(money)
  }

  def heapSort(arr: Array[Int]): Array[Int] = {
    val sortedArray = arr.clone

    def sift(start: Int, count: Int): Unit = {
      var root = start

      while (root * 2 + 1 < count) {
        var child = root * 2 + 1
        if (child < count - 1 && sortedArray(child) < sortedArray(child + 1)) {
          child += 1
        }
        if (sortedArray(root) < sortedArray(child)) {
          val t = sortedArray(root)
          sortedArray(root) = sortedArray(child)
          sortedArray(child) = t
          root = child
        } else return
      }
    }

    val count = sortedArray.length
    var start = count / 2 - 1
    var end   = count - 1

    while (start >= 0) {
      sift(start, count)
      start -= 1
    }

    while (end > 0) {
      val t = sortedArray(end)
      sortedArray(end) = sortedArray(0)
      sortedArray(0) = t
      sift(0, end)
      end -= 1
    }
    return sortedArray
  }

  def binaryExponentiation(base: Int, power: Int): Int = {
    if (power == 0) {
      return 1
    } else if (power % 2 == 1) {
      return binaryExponentiation(base, power - 1) * base
    } else {
      val answer: Int = binaryExponentiation(base, power / 2)
      return answer * answer
    }
  }
  
  def main(args: Array[String]): Unit = {

    val isBold : Boolean = true
    val yellow : String = "yellow"

    if (isBold) {
      println("bold")
    } else if(5 < 8) {
      println("5 < 8")
    }

    if (yellow.equalsIgnoreCase("Yellow")) {
      println("yellow")
    }
    if (yellow =="yellow") {
      println("yellow")
    } else {
       isBold = false
    }

    val day : Int = 5

    val dayOfWeek = day match {
      case 1  => "asdad"
      case 2  => "asdads"
      case 3  => "dasasd"
      case 4  => "asdads"
      case 5  => "asdasdads"
      case 6  => "asdsda"
      case 7  => "dasasd"
      case _  => "sdaasdsdasda"  // default
    }

    
    val i = 1

    while(i < 10) {
      println(i)
      i += 1
    }

    for(i <- 1 to 10 if  i % 2 == 0){
      println(i)
    }
  }

}